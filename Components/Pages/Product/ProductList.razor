@page "/product"
@inject IProductRepository _productRepository
@inject IJSRuntime _JS

<Modal OnModalConfirmation="ConfirmationDeleteClick"
		ButtonBootstrapStyle="btn-danger"
		ButtonText="Delete"
		Title="Are you sure want to delete this Product?"></Modal>

@if (IsProcessing)
{
	<div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
		<img src="/images/loading-whale-no-bg.gif" alt="loading" />
	</div>
} else
{
	<div class="card shadow border-0 mt-4">
		<div class="card-header bg-black bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">Product List</h2>
				</div>
			</div>
		</div>
		<div class="card-body py-4">
			<div class="row pb-3">
				<div class="col-12 text-end">
					<a href="/product/create" class="btn btn-lg btn-secondary" style="width:250px">
						<i class="bi bi-plus-square"></i> Add New
					</a>
				</div>
			</div>
			@if(Products.Any())
			{
				<table class="table table-bordered table-striped">
					<thead>
						<tr>
							<th>Name</th>
							<th>Price</th>
							<th>Special Tag</th>
							<th>Category</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
						@foreach(var obj in Products)
						{
							<tr>
								<td>
									@obj.Name
								</td>
								<td>
									@obj.Price
								</td>
								<td>
									@obj.SpecialTag
								</td>
								<td>
									@(obj.Category.Name)
								</td> <!-- Cek null untuk Category -->

								<td>
									<a href="@($"product/update/{obj.Id}")" class="btn btn-lg btn-primary">
										<i class="bi bi-pencil-fill"></i> Edit
									</a>
									<button class="btn btn-lg btn-danger" @onclick="() => HandleDelete(obj.Id)">
										<i class="bi bi-trash3-fill"></i> Delete
									</button>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
	</div>
}


@code {
	private bool IsProcessing { get; set; } = true;
	private IEnumerable<Product> Products { get; set; } = new List<Product>();
	private int DeleteProductId { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadProduct();
			IsProcessing = false;
			StateHasChanged();
		}
		// return base.OnAfterRenderAsync(firstRender);
	}

	private async Task LoadProduct()
	{
		Products = await _productRepository.GetAllAsync();
	}

	private void HandleDelete(int Id)
	{
		DeleteProductId = Id;
		_JS.InvokeVoidAsync("ShowConfirmationModal");
	}

	private async Task ConfirmationDeleteClick(bool isConfirmed)
	{
		IsProcessing = true;
		await _JS.InvokeVoidAsync("HideConfirmationModal");
		if(isConfirmed && DeleteProductId !=0)
		{
			var result = await _productRepository.DeleteAsync(DeleteProductId);
			if(result)
				_JS.ToastrSuccess("Product Delete Successfully");
			else
				_JS.ToastrError("Product Delete Failed");

			await LoadProduct();
		}
		DeleteProductId = 0;
		IsProcessing = false;

	}


}
