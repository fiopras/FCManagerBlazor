@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _JS

<FCManagerBlazor.Components.Shared.Modal OnModalConfirmation="ConfirmationDeleteClick"></FCManagerBlazor.Components.Shared.Modal>

@if (IsProcessing)
{
	<div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
		<img src="/images/loading-whale-no-bg.gif" alt="loading" />
	</div>
} else
{
	<div class="card shadow border-0 mt-4">
		<div class="card-header bg-black bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">Category List</h2>
				</div>
			</div>
		</div>
		<div class="card-body py-4">
			<div class="row pb-3">
				<div class="col-12 text-end">
					<a href="/category/create" class="btn btn-lg btn-secondary" style="width:250px">
						<i class="bi bi-plus-square"></i> Add New
					</a>
				</div>
			</div>
			@if(Categories.Any())
			{
				<table class="table table-bordered table-striped">
					<thead>
						<tr>
							<th>Name</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
						@foreach(var obj in Categories)
						{
							<tr>
								<td>
									@obj.Name
								</td>
								<td>
									<a href="@($"category/update/{obj.Id}")" class="btn btn-lg btn-primary">
										<i class="bi bi-pencil-fill"></i> Edit
									</a>
									<button class="btn btn-lg btn-danger" @onclick="() => HandleDelete(obj.Id)">
										<i class="bi bi-trash3-fill"></i> Delete
									</button>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
	</div>
}


@code {
	private bool IsProcessing { get; set; } = true;
	private IEnumerable<Category> Categories { get; set; } = new List<Category>();
	private int DeleteCategoryId { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadCategory();
			IsProcessing = false;
			StateHasChanged();
		}
		// return base.OnAfterRenderAsync(firstRender);
	}

	private async Task LoadCategory()
	{
		Categories = await _categoryRepository.GetAllAsync();
	}

	private void HandleDelete(int Id)
	{
		DeleteCategoryId = Id;
		_JS.InvokeVoidAsync("ShowConfirmationModal");
	}

	private async Task ConfirmationDeleteClick(bool isConfirmed)
	{
		IsProcessing = true;
		await _JS.InvokeVoidAsync("HideConfirmationModal");
		if(isConfirmed && DeleteCategoryId !=0)
		{
			var result = await _categoryRepository.DeleteAsync(DeleteCategoryId);
			if(result)
				_JS.ToastrSuccess("Category Delete Successfully");
			else
				_JS.ToastrError("Category Delete Failed");

			await LoadCategory();
		}
		DeleteCategoryId = 0;
		IsProcessing = false;

	}


}
